# Main Title
main:
  header:
    title : "Embedded Systems" # Title Text
    description : "Welcome! You'll find cool embedded systems projects here!" # Title Desc
    button:
      text: "Learn More" # Button Text
      url: "#about" # Button URL

# About
about:
  title: "About the Project"
  desc: "This project was focused initially to serve as a prototype to aid the physically challenged through a voice recognition model. The tiny RC car mimics/represents a system that could provide movement for the disabled through the use of simple commands such as start/stop vehicle. The control of the direction could be implemented using advanced ML features such as eye tracking, object tracing or through joysticks that could be actuated from other parts of human body such as jaw movement. The tiny RC car gives a minimalistic feel as to how this could be implemented so that it could be expanded further in the future. Feel free to get in touch to learn more or to work together! ;)"
  button:
    enable: true
    text: "Go to Projects"
    url: "#projects"
  image: "assets/img/about.jpg"

projects:
  card1:
    title: "RC Car with Obstacle Avoidance and Voice Recognition"
    text: "The tiny car is equipped with ultrasonic sensors that override user input from the remote controller to prevent any collisions with hurdles in the way. A voice recoginition model has been implemented to 'Start'/'Stop' the car upon user input."
    img: "assets/img/newcar2.jpg"
  card2:
    title: "Project Instructions for re-creation"
    text: "To compile the code, please follow the following steps: 1. Setting up the remote: To set up the remote, please compile the code inside the transmitting folder inside the repository. Use adafruit qtpy for the transmitter. ALso, use another pico4ml board inside the remote control for the voice recognition system. This contains the usage of the pio module. Please use cmake to compile this. 2. Setting up the receiver: We are using two modules here: one rp pico and one pico4ml board. The rp pico receives the bluetooth information and sends it to the pico4ml, which is used to control the wheel speed of the car. Another python file is provided in this folder, that contains the implementation of the motor driving system. This must be compiled using circuitpython."
    img: "assets/img/BlockDiagram.jpg"
  card3:
    title: "Significant Troubleshooting"
    text: "One significant challenge in our project was to make the voice recognition model to be immune to ambient noise. This was done by using 2 categories of sounds to be classified: noise and stop. The noise samples are taken from the real life noise samples which were collected using the microphone of the Pico4ml board. Another challenge we faced was the sampling rate of the microphone. We experimented with different combinations and finally arrived at 16kHz sampling rate for the microphone. Another significant issue was the calibration of the joystick. The joystick provides output from 0 to 1023 with a value of 512 for the rest position. However, the joystick was not calibrated and hence we had to follow the following logic to calibrate it, since the rest position was 756, instead of 512."
    img: "assets/img/challenge.jpg"
    
other:
  card1:
    title: "Reflections on Design"
    text: "We chose components that could be easily sourced from the Detkin lab inventory so that we could start working immediately on our project. We would recommend a similar design to future teams because the waiting time is significantly minimized. However, the future teams could opt for better microphones and joysticks."
    img: "assets/img/components.jpg"
  card2:
    title: "Feature Found Satisfying"
    text: "The complete system was satisfying. However, we liked the stop functionality of the car, since it could be controlled by the voice of the user. We decided to do this to immediately stop the car from crashing and prevent damage to the components in it"
    img: "assets/img/satisfy.jpg"
  card3:
    title: "PIO Code Explanation"
    text: "The PIO part of the our system was the voice recognition model, which was trained using TensorFlow lite. Since the PIO can be programmed in C, the speed of ML model inference is extremely fast, since most machine learning libraries use python. The h5 tensorflow model format was converted into into a C byte-array to increase the inference speed. We also experimented with quantization methods and decided to use INT8 quantization to speed up the inference since it is much faster than the commonly used float32 model weight representation"
    img: "assets/img/pio.png"
